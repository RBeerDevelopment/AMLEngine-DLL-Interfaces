////////////////////////////////////////////////////////////////////////
//
// CAEX_ClassModel.cpp
//
// This file was generated by XMLSpy 2008 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////


#include "StdAfx.h"
#include <string.h>
#include "CAEX_ClassModel.h"


#include "../AltovaXML/XercesString.h"




// turn off warning: "this" used in base initializer list
#pragma warning(disable:4355)


namespace CAEX_ClassModel
{


const string_type CAEXObject::GUID_FORMAT = "B";

CAEXObject::CAEXObject(xercesc::DOMNode* const& node)
: CAEXBasicObject(node)
, ID(*this)	// "@ID"
, Name(*this)	// "@Name"
{
}

CAEXObject::CAEXObject(CAEXObject const& other)
: CAEXBasicObject(other.GetNode())
, ID(*this)	// "@ID"
, Name(*this)	// "@Name"
{
}


ChangeMode::ChangeMode(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

ChangeMode::ChangeMode(ChangeMode const& other)
: TypeBase(other.GetNode())
{
}


CAEX_ClassModel::CAEX_ClassModel(xercesc::DOMNode* const& node)
: TypeBase(node)
, CAEXFile(*this)	// "CAEXFile"
{
}

CAEX_ClassModel::CAEX_ClassModel(CAEX_ClassModel const& other)
: TypeBase(other.GetNode())
, CAEXFile(*this)	// "CAEXFile"
{
}


CAEX_ClassModel CAEX_ClassModel::LoadFromFile(const string_type& fileName)
{
	return CAEX_ClassModel(XercesTreeOperations::LoadDocument(fileName));
}

CAEX_ClassModel CAEX_ClassModel::LoadFromString(const string_type& text)
{
	return CAEX_ClassModel(XercesTreeOperations::LoadXml(text));
}

void CAEX_ClassModel::SaveToFile(const string_type& fileName, bool prettyPrint)
{
	XercesTreeOperations::SaveDocument(GetDocumentNode(), fileName, prettyPrint, _T("UTF-8"), false, false);
}

void CAEX_ClassModel::SaveToFile(const string_type& fileName, bool prettyPrint, const string_type& encoding)
{
	XercesTreeOperations::SaveDocument(GetDocumentNode(), fileName, prettyPrint, encoding, _tcsicmp(encoding.c_str(), _T("UTF-16BE")) == 0, _tcsicmp(encoding.c_str(), _T("UTF-16")) == 0);
}

void CAEX_ClassModel::SaveToFile(const string_type& fileName, bool prettyPrint, const string_type& encoding, bool bBigEndian, bool bBOM)
{
	XercesTreeOperations::SaveDocument(GetDocumentNode(), fileName, prettyPrint, encoding, bBigEndian, bBOM);
}

string_type CAEX_ClassModel::SaveToString(bool prettyPrint)
{
	return XercesTreeOperations::SaveXml(GetDocumentNode(), prettyPrint);
}

CAEX_ClassModel CAEX_ClassModel::CreateDocument()
{
	return XercesTreeOperations::CreateDocument();
}

void CAEX_ClassModel::DestroyDocument()
{
	XercesTreeOperations::DocumentType doc = GetDocumentNode();
	XercesTreeOperations::FreeDocument(doc);
	m_node = 0;
}

void CAEX_ClassModel::SetDTDLocation(const string_type& dtdLocation)
{

	xercesc::DOMDocument* document = (xercesc::DOMDocument*)GetNode();
	xercesc::DOMDocumentType* doctype = document->getDoctype();
	if (doctype != 0)
	{
		document->removeChild(doctype);
	}

	xercesc::DOMElement* rootElement = document->getDocumentElement();
	if (rootElement == 0)
		throw altova::InvalidOperationException(_T("You have to add a root element before setting DTD location."));

	doctype = document->createDocumentType(rootElement->getNodeName(), XercesStringTemp(_T("")), XercesStringTemp(dtdLocation));
	document->insertBefore(doctype, rootElement);

}

void CAEX_ClassModel::SetSchemaLocation(const string_type& schemaLocation)
{

	xercesc::DOMDocument* document = (xercesc::DOMDocument*)GetNode();
	xercesc::DOMElement* rootElement = document->getDocumentElement();
	if (rootElement == 0)
		throw altova::InvalidOperationException(_T("You have to add a root element before setting schema location."));

	string_type namespaceURI = (string_type)XercesUnstringTemp(rootElement->getNamespaceURI());


	if (namespaceURI.empty())
		XercesTreeOperations::SetAttribute(rootElement, _T("noNamespaceSchemaLocation"), _T("http://www.w3.org/2001/XMLSchema-instance"), schemaLocation);
	else
		XercesTreeOperations::SetAttribute(rootElement, _T("schemaLocation"), _T("http://www.w3.org/2001/XMLSchema-instance"), namespaceURI + _T(" ") + schemaLocation);

}

CAEX_ClassModel CAEX_ClassModel::LoadFromBinary(const std::vector<unsigned char>& data)
{
	return XercesTreeOperations::LoadFromBinary(data);
}

std::vector<unsigned char> CAEX_ClassModel::SaveToBinary(bool prettyPrint)
{
	return XercesTreeOperations::SaveToBinary((XercesTreeOperations::DocumentType)GetNode(), prettyPrint);
}

std::vector<unsigned char> CAEX_ClassModel::SaveToBinary(bool prettyPrint, const string_type& encoding)
{
	std::vector<unsigned char> result;
	XercesTreeOperations::SaveToBinary(result, (XercesTreeOperations::DocumentType)GetNode(), prettyPrint, encoding, _tcsicmp(encoding.c_str(), _T("UTF-16BE")) == 0, _tcsicmp(encoding.c_str(), _T("UTF-16")) == 0);
	return result;
}

std::vector<unsigned char> CAEX_ClassModel::SaveToBinary(bool prettyPrint, const string_type& encoding, bool bBigEndian, bool bBOM)
{
	std::vector<unsigned char> result;
	XercesTreeOperations::SaveToBinary(result, (XercesTreeOperations::DocumentType)GetNode(), prettyPrint, encoding, bBigEndian, bBOM);
	return result;
}



DescriptionType::DescriptionType(xercesc::DOMNode* const& node)
: xs::CstringType(node)
, ChangeMode(*this)	// "@ChangeMode"
{
}

DescriptionType::DescriptionType(DescriptionType const& other)
: xs::CstringType(other.GetNode())
, ChangeMode(*this)	// "@ChangeMode"
{
}


VersionType::VersionType(xercesc::DOMNode* const& node)
: xs::CstringType(node)
, ChangeMode(*this)	// "@ChangeMode"
{
}

VersionType::VersionType(VersionType const& other)
: xs::CstringType(other.GetNode())
, ChangeMode(*this)	// "@ChangeMode"
{
}


CopyrightType::CopyrightType(xercesc::DOMNode* const& node)
: xs::CstringType(node)
, ChangeMode(*this)	// "@ChangeMode"
{
}

CopyrightType::CopyrightType(CopyrightType const& other)
: xs::CstringType(other.GetNode())
, ChangeMode(*this)	// "@ChangeMode"
{
}


ExternalReferenceType::ExternalReferenceType(xercesc::DOMNode* const& node)
: CAEXBasicObject(node)
, Path(*this)	// "@Path"
, Alias(*this)	// "@Alias"
{
}

ExternalReferenceType::ExternalReferenceType(ExternalReferenceType const& other)
: CAEXBasicObject(other.GetNode())
, Path(*this)	// "@Path"
, Alias(*this)	// "@Alias"
{
}


AttributeDataTypeType::AttributeDataTypeType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

AttributeDataTypeType::AttributeDataTypeType(AttributeDataTypeType const& other)
: TypeBase(other.GetNode())
{
}


RefSemanticType::RefSemanticType(xercesc::DOMNode* const& node)
: CAEXBasicObject(node)
, CorrespondingAttributePath(*this)	// "@CorrespondingAttributePath"
{
}

RefSemanticType::RefSemanticType(RefSemanticType const& other)
: CAEXBasicObject(other.GetNode())
, CorrespondingAttributePath(*this)	// "@CorrespondingAttributePath"
{
}


AttributeNameMappingType::AttributeNameMappingType(xercesc::DOMNode* const& node)
: CAEXBasicObject(node)
, SystemUnitAttributeName(*this)	// "@SystemUnitAttributeName"
, RoleAttributeName(*this)	// "@RoleAttributeName"
{
}

AttributeNameMappingType::AttributeNameMappingType(AttributeNameMappingType const& other)
: CAEXBasicObject(other.GetNode())
, SystemUnitAttributeName(*this)	// "@SystemUnitAttributeName"
, RoleAttributeName(*this)	// "@RoleAttributeName"
{
}


InterfaceNameMappingType::InterfaceNameMappingType(xercesc::DOMNode* const& node)
: CAEXBasicObject(node)
, SystemUnitInterfaceName(*this)	// "@SystemUnitInterfaceName"
, RoleInterfaceName(*this)	// "@RoleInterfaceName"
{
}

InterfaceNameMappingType::InterfaceNameMappingType(InterfaceNameMappingType const& other)
: CAEXBasicObject(other.GetNode())
, SystemUnitInterfaceName(*this)	// "@SystemUnitInterfaceName"
, RoleInterfaceName(*this)	// "@RoleInterfaceName"
{
}


ExternalInterfaceType::ExternalInterfaceType(xercesc::DOMNode* const& node)
: InterfaceClassType(node)
{
}

ExternalInterfaceType::ExternalInterfaceType(ExternalInterfaceType const& other)
: InterfaceClassType(other.GetNode())
{
}


namespace xs
{

CENTITIES::CENTITIES(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CENTITIES::CENTITIES(CENTITIES const& other)
: TypeBase(other.GetNode())
{
}


CENTITY::CENTITY(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CENTITY::CENTITY(CENTITY const& other)
: TypeBase(other.GetNode())
{
}


CID::CID(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CID::CID(CID const& other)
: TypeBase(other.GetNode())
{
}


CIDREF::CIDREF(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CIDREF::CIDREF(CIDREF const& other)
: TypeBase(other.GetNode())
{
}


CIDREFS::CIDREFS(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CIDREFS::CIDREFS(CIDREFS const& other)
: TypeBase(other.GetNode())
{
}


CNCName::CNCName(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CNCName::CNCName(CNCName const& other)
: TypeBase(other.GetNode())
{
}


CNMTOKEN::CNMTOKEN(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CNMTOKEN::CNMTOKEN(CNMTOKEN const& other)
: TypeBase(other.GetNode())
{
}


CNMTOKENS::CNMTOKENS(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CNMTOKENS::CNMTOKENS(CNMTOKENS const& other)
: TypeBase(other.GetNode())
{
}


CNOTATION::CNOTATION(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CNOTATION::CNOTATION(CNOTATION const& other)
: TypeBase(other.GetNode())
{
}


CName::CName(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CName::CName(CName const& other)
: TypeBase(other.GetNode())
{
}


CQName::CQName(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CQName::CQName(CQName const& other)
: TypeBase(other.GetNode())
{
}


CanySimpleType::CanySimpleType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CanySimpleType::CanySimpleType(CanySimpleType const& other)
: TypeBase(other.GetNode())
{
}


CanyType::CanyType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CanyType::CanyType(CanyType const& other)
: TypeBase(other.GetNode())
{
}


CanyURI::CanyURI(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CanyURI::CanyURI(CanyURI const& other)
: TypeBase(other.GetNode())
{
}


Cbase64Binary::Cbase64Binary(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cbase64Binary::Cbase64Binary(Cbase64Binary const& other)
: TypeBase(other.GetNode())
{
}


Cboolean::Cboolean(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cboolean::Cboolean(Cboolean const& other)
: TypeBase(other.GetNode())
{
}


Cbyte::Cbyte(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cbyte::Cbyte(Cbyte const& other)
: TypeBase(other.GetNode())
{
}


Cdate::Cdate(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cdate::Cdate(Cdate const& other)
: TypeBase(other.GetNode())
{
}


CdateTime::CdateTime(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CdateTime::CdateTime(CdateTime const& other)
: TypeBase(other.GetNode())
{
}


Cdecimal::Cdecimal(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cdecimal::Cdecimal(Cdecimal const& other)
: TypeBase(other.GetNode())
{
}


Cdouble::Cdouble(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cdouble::Cdouble(Cdouble const& other)
: TypeBase(other.GetNode())
{
}


Cduration::Cduration(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cduration::Cduration(Cduration const& other)
: TypeBase(other.GetNode())
{
}


Cfloat::Cfloat(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cfloat::Cfloat(Cfloat const& other)
: TypeBase(other.GetNode())
{
}


CgDay::CgDay(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CgDay::CgDay(CgDay const& other)
: TypeBase(other.GetNode())
{
}


CgMonth::CgMonth(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CgMonth::CgMonth(CgMonth const& other)
: TypeBase(other.GetNode())
{
}


CgMonthDay::CgMonthDay(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CgMonthDay::CgMonthDay(CgMonthDay const& other)
: TypeBase(other.GetNode())
{
}


CgYear::CgYear(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CgYear::CgYear(CgYear const& other)
: TypeBase(other.GetNode())
{
}


CgYearMonth::CgYearMonth(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CgYearMonth::CgYearMonth(CgYearMonth const& other)
: TypeBase(other.GetNode())
{
}


ChexBinary::ChexBinary(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

ChexBinary::ChexBinary(ChexBinary const& other)
: TypeBase(other.GetNode())
{
}


Cint::Cint(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cint::Cint(Cint const& other)
: TypeBase(other.GetNode())
{
}


Cinteger::Cinteger(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cinteger::Cinteger(Cinteger const& other)
: TypeBase(other.GetNode())
{
}


Clanguage::Clanguage(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Clanguage::Clanguage(Clanguage const& other)
: TypeBase(other.GetNode())
{
}


Clong::Clong(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Clong::Clong(Clong const& other)
: TypeBase(other.GetNode())
{
}


CnegativeInteger::CnegativeInteger(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CnegativeInteger::CnegativeInteger(CnegativeInteger const& other)
: TypeBase(other.GetNode())
{
}


CnonNegativeInteger::CnonNegativeInteger(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CnonNegativeInteger::CnonNegativeInteger(CnonNegativeInteger const& other)
: TypeBase(other.GetNode())
{
}


CnonPositiveInteger::CnonPositiveInteger(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CnonPositiveInteger::CnonPositiveInteger(CnonPositiveInteger const& other)
: TypeBase(other.GetNode())
{
}


CnormalizedString::CnormalizedString(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CnormalizedString::CnormalizedString(CnormalizedString const& other)
: TypeBase(other.GetNode())
{
}


CpositiveInteger::CpositiveInteger(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CpositiveInteger::CpositiveInteger(CpositiveInteger const& other)
: TypeBase(other.GetNode())
{
}


Cshort::Cshort(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cshort::Cshort(Cshort const& other)
: TypeBase(other.GetNode())
{
}


Cstring::Cstring(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Cstring::Cstring(Cstring const& other)
: TypeBase(other.GetNode())
{
}


Ctime::Ctime(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Ctime::Ctime(Ctime const& other)
: TypeBase(other.GetNode())
{
}


Ctoken::Ctoken(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

Ctoken::Ctoken(Ctoken const& other)
: TypeBase(other.GetNode())
{
}


CunsignedByte::CunsignedByte(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CunsignedByte::CunsignedByte(CunsignedByte const& other)
: TypeBase(other.GetNode())
{
}


CunsignedInt::CunsignedInt(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CunsignedInt::CunsignedInt(CunsignedInt const& other)
: TypeBase(other.GetNode())
{
}


CunsignedLong::CunsignedLong(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CunsignedLong::CunsignedLong(CunsignedLong const& other)
: TypeBase(other.GetNode())
{
}


CunsignedShort::CunsignedShort(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CunsignedShort::CunsignedShort(CunsignedShort const& other)
: TypeBase(other.GetNode())
{
}


CstringType::CstringType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CstringType::CstringType(CstringType const& other)
: TypeBase(other.GetNode())
{
}


CdateTimeType::CdateTimeType(xercesc::DOMNode* const& node)
: TypeBase(node)
{
}

CdateTimeType::CdateTimeType(CdateTimeType const& other)
: TypeBase(other.GetNode())
{
}


} // namespace xs


void DescriptionType::operator=(const string_type& value) {
	CstringType::operator=(value);
}

void VersionType::operator=(const string_type& value) {
	CstringType::operator=(value);
}

void CopyrightType::operator=(const string_type& value) {
	CstringType::operator=(value);
}

namespace xs
{

void CanyType::operator=(const string_type& value) {
	XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CanyType_altova_unnamed, value);
}

CanyType::operator string_type() {
	return CastAs<string_type >::Do(GetNode(), members + _altova_mi_xs_altova_CanyType_altova_unnamed);
}

void CstringType::operator=(const string_type& value) {
	XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CstringType_altova_unnamed, value);
}

CstringType::operator string_type() {
	return CastAs<string_type >::Do(GetNode(), members + _altova_mi_xs_altova_CstringType_altova_unnamed);
}

void CdateTimeType::operator=(const altova::DateTime& value) {
	XercesTreeOperations::SetValue(GetNode(), members + _altova_mi_xs_altova_CdateTimeType_altova_unnamed, value);
}

CdateTimeType::operator altova::DateTime() {
	return CastAs<altova::DateTime >::Do(GetNode(), members + _altova_mi_xs_altova_CdateTimeType_altova_unnamed);
}

} // namespace xs


}