////////////////////////////////////////////////////////////////////////
//
// SchemaTypeString.h
//
// This file was generated by XMLSpy 2008 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////


#ifndef ALTOVA_SCHEMATYPESTRING_H_INCLUDED
#define ALTOVA_SCHEMATYPESTRING_H_INCLUDED

#if _MSC_VER > 1000
	#pragma once
#endif // _MSC_VER > 1000


#include <math.h>
#include "SchemaTypes.h"
#include "SchemaTypeNumber.h"
#include "SchemaTypeCalendar.h"


namespace altova {


////////////////////////////////////////////////////////////////////////
//
//  CSchemaString family
//
////////////////////////////////////////////////////////////////////////


class ALTOVA_DECLSPECIFIER CSchemaString : public CSchemaType, public CSchemaTypeNumber, public CSchemaTypeCalendar
{
public:
	// Construction
	CSchemaString()																		{};
	CSchemaString( const tstring sValue ) : m_Value( sValue )							{ SetIsEmpty( 0==sValue.size() ); }
	CSchemaString( const TCHAR* szValue )												{ Parse( szValue); }
	CSchemaString( const double nValue );	// numeric value will be transformed into a string-representation
	CSchemaString( const CSchemaType& rOther )											{ Assign( rOther ); }


	// Operators
	CSchemaString& operator=(const CSchemaType& rOther)							{ return (CSchemaString&)Assign(rOther); }
	double											ToCalcValue() const					{ return ToDouble(); }

	// ---------- Interface CSchemaType ----------
	friend class CSchemaType;
	// Operators
	virtual bool									ToBool() const;
	virtual operator								tstring() const;

	// Operations
	virtual void									Empty();
	virtual bool									Parse(const TCHAR* szValue);
	virtual CSchemaType&							Assign(const CSchemaType& rOther);

	virtual CSchemaTypeNumber*						GetSchemaTypeNumberPtr() const		{ return (CSchemaTypeNumber*)this; }
	virtual CSchemaTypeCalendar*					GetSchemaTypeCalendarPtr() const	{ return (CSchemaTypeCalendar*)this; }

	// --------- Interface CSchemaTypeNumber ---------
	virtual ETypes									NumericType() const;
	virtual long									ToLong() const;
	virtual __int64									ToInt64() const;
	virtual float									ToFloat() const;
	virtual double									ToDouble() const;

	// ---------- Interface CSchemaTypeCalendar ----------
	virtual ETypes									CalendarType() const;
	virtual operator 								CSchemaTypeCalendar::CDuration() const;
	virtual operator 								CSchemaTypeCalendar::CTime() const;
	virtual operator 								CSchemaTypeCalendar::CDay() const;
	virtual operator 								CSchemaTypeCalendar::CMonth() const;
	virtual operator 								CSchemaTypeCalendar::CMonthDay() const;
	virtual operator 								CSchemaTypeCalendar::CYear() const;
	virtual operator 								CSchemaTypeCalendar::CYearMonth() const;
	virtual operator 								CSchemaTypeCalendar::CDate() const;
	virtual operator 								CSchemaTypeCalendar::CDateTime() const;



	enum { TYPE = CSchemaType::k_String };

	typedef const TCHAR* basetype;
	#define	CSchemaString_BASETYPE_LPCTSTR

	typedef double	calctype;	// string values are represented as double-values if possible.

protected:
	tstring										m_Value;
};

class ALTOVA_DECLSPECIFIER CSchemaNormalizedString : public CSchemaString
{
public:
	// Construction
	CSchemaNormalizedString() : CSchemaString() {}
	CSchemaNormalizedString( const tstring sValue ) {Parse(sValue.c_str()); }
	CSchemaNormalizedString( const TCHAR* szValue ) {Parse(szValue);}
	CSchemaNormalizedString( const double nValue ) : CSchemaString( nValue ) {}	// numeric value will be transformed into a string-representation
	CSchemaNormalizedString( const CSchemaType& rOther ) : CSchemaString( rOther ) {}



	virtual bool Parse( const TCHAR* szValue ) 
	{ 
		m_Value = CSchemaType::normalize(CSchemaType::WHITESPACE_REPLACE, szValue ); 
		SetIsEmpty( 0==m_Value.size() ); 
		return true;
	}
	
};

class ALTOVA_DECLSPECIFIER CSchemaToken : public CSchemaNormalizedString
{
public:
	// Construction
	CSchemaToken () : CSchemaNormalizedString() {}
	CSchemaToken ( const tstring sValue ) {Parse(sValue.c_str()); }
	CSchemaToken ( const TCHAR* szValue ) {Parse(szValue);}
	CSchemaToken ( const double nValue ) : CSchemaNormalizedString( nValue ) {}	// numeric value will be transformed into a string-representation
	CSchemaToken ( const CSchemaType& rOther ) : CSchemaNormalizedString( rOther ) {}



	virtual bool Parse( const TCHAR* szValue ) 
	{ 
		m_Value = CSchemaType::normalize(CSchemaType::WHITESPACE_COLLAPSE, szValue ); 
		SetIsEmpty( 0==m_Value.size() ); 
		return true;
	}
};


typedef CSchemaNormalizedString CSchemaLanguage;
typedef CSchemaNormalizedString CSchemaName;
typedef CSchemaToken CSchemaNMToken;
typedef CSchemaToken CSchemaNMTokens;
typedef CSchemaNormalizedString CSchemaNCName;
typedef CSchemaNormalizedString CSchemaID;
typedef CSchemaNormalizedString CSchemaIDRef;
typedef CSchemaNormalizedString CSchemaIDRefs;
typedef CSchemaNormalizedString CSchemaEntity;
typedef CSchemaNormalizedString CSchemaEntities;
typedef CSchemaNormalizedString CSchemaAnyURI;
typedef CSchemaNormalizedString CSchemaQName;
typedef CSchemaNormalizedString CSchemaNotation;

#define CSchemaNormalizedString_BASETYPE_LPCTSTR
#define CSchemaToken_BASETYPE_LPCTSTR
#define CSchemaLanguage_BASETYPE_LPCTSTR
#define CSchemaName_BASETYPE_LPCTSTR
#define CSchemaNMToken_BASETYPE_LPCTSTR
#define CSchemaNMTokens_BASETYPE_LPCTSTR
#define CSchemaNCName_BASETYPE_LPCTSTR
#define CSchemaID_BASETYPE_LPCTSTR
#define CSchemaIDRef_BASETYPE_LPCTSTR
#define CSchemaIDRefs_BASETYPE_LPCTSTR
#define CSchemaEntity_BASETYPE_LPCTSTR
#define CSchemaEntities_BASETYPE_LPCTSTR
#define CSchemaAnyURI_BASETYPE_LPCTSTR
#define CSchemaQName_BASETYPE_LPCTSTR
#define CSchemaNotation_BASETYPE_LPCTSTR



} // namespace altova


#endif // ALTOVA_SCHEMATYPESTRING_H_INCLUDED
