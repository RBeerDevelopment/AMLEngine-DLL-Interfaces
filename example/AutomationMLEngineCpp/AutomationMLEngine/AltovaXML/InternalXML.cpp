////////////////////////////////////////////////////////////////////////
//
// InternalXML.cpp
//
// This file was generated by XMLSpy 2008 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////


#include "StdAfx.h"
#include "../Altova/Altova.h"
#include "../Altova/SchemaTypes.h"
#include "XmlException.h"
#include "Node.h"
#include "Doc.h"
#include "InternalXML.h"
#include "XercesString.h"
#include <xercesc/framework/MemBufInputSource.hpp>
#include <xercesc/framework/Wrapper4InputSource.hpp>
#include <xercesc/framework/MemBufFormatTarget.hpp>


namespace altova {

tstring InternalXML::XMLToString( xercesc::DOMDocument* pXMLTree )
{
	return XercesTreeOperations::SaveXml( pXMLTree, false );
}

std::vector< unsigned char > InternalXML::XMLToBase64Binary( xercesc::DOMDocument* pXMLTree, const tstring& encoding, const tstring& byteorder, bool bBOM )
{
	std::vector<unsigned char> result;
	XercesTreeOperations::SaveToBinary( result, pXMLTree, false, encoding, _tcsicmp(byteorder.c_str(), _T("big endian")) == 0, bBOM );
	return result;
}

xercesc::DOMDocument* InternalXML::XMLFromString( const tstring& sXMLString )
{
	xercesc::DOMDocument* spDocument = XercesTreeOperations::LoadXml( sXMLString );
	return spDocument;
}

xercesc::DOMDocument* InternalXML::XMLFromBase64Binary( const std::vector< unsigned char >& vXMLString )
{
	xercesc::XercesDOMParser* parser = new xercesc::XercesDOMParser();
	parser->setDoNamespaces(true);

	xercesc::MemBufInputSource source( 
		( XMLByte* ) &*vXMLString.begin(), 
		vXMLString.size(), 
		"String");
	
	parser->parse(source);
	XercesTreeOperations::DocumentType doc = parser->adoptDocument();
	delete parser;
	return doc;		
}


} // namespace altova
