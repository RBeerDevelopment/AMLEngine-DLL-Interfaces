#ifndef _ALTOVA_INCLUDED_CAEX_ClassModel_ALTOVA__ALTOVA_CCAEXFileType
#define _ALTOVA_INCLUDED_CAEX_ClassModel_ALTOVA__ALTOVA_CCAEXFileType

#include <list>

// added for the additional members
#include "StdAfx.h"
#include "CAEX_ClassModel.h"
#include "Property.h"

namespace CAEX_ClassModel
{

class CAEXFileType : public CAEXBasicObject
{
public:
	CAEX_ClassModel_EXPORT CAEXFileType(xercesc::DOMNode* const& init);
	CAEX_ClassModel_EXPORT CAEXFileType(CAEXFileType const& init);

	void operator=(CAEXFileType const& other) { m_node = other.m_node; }

	static altova::meta::ComplexType StaticInfo() { return altova::meta::ComplexType(types + _altova_ti_altova_CAEXFileType); }

	MemberAttribute<string_type,_altova_mi_altova_CAEXFileType_altova_FileName> FileName;	// FileName Cstring
	MemberAttribute<string_type,_altova_mi_altova_CAEXFileType_altova_SchemaVersion> SchemaVersion;	// SchemaVersion Cstring

	MemberElement<ExternalReferenceType, _altova_mi_altova_CAEXFileType_altova_ExternalReference> ExternalReference;
	struct ExternalReference { typedef Iterator<ExternalReferenceType> iterator; };
	MemberElement<InstanceHierarchyType, _altova_mi_altova_CAEXFileType_altova_InstanceHierarchy> InstanceHierarchy;
	struct InstanceHierarchy { typedef Iterator<InstanceHierarchyType> iterator; };
	MemberElement<InterfaceClassLibType, _altova_mi_altova_CAEXFileType_altova_InterfaceClassLib> InterfaceClassLib;
	struct InterfaceClassLib { typedef Iterator<InterfaceClassLibType> iterator; };
	MemberElement<RoleClassLibType, _altova_mi_altova_CAEXFileType_altova_RoleClassLib> RoleClassLib;
	struct RoleClassLib { typedef Iterator<RoleClassLibType> iterator; };
	MemberElement<SystemUnitClassLibType, _altova_mi_altova_CAEXFileType_altova_SystemUnitClassLib> SystemUnitClassLib;
	struct SystemUnitClassLib { typedef Iterator<SystemUnitClassLibType> iterator; };

    // The following is not generated by Altova XMLSpy!
    // Added for compatibility with the C# implementation

    /** Holds CaexSchemaLocation
    */
    Property<string_type> CaexSchemaLocation;
    /** Read access callback function for CaexSchemaLocation
    */
    static string_type ReadCaexSchemaLocation(void *instance);
    /** Write access callback function for CaexSchemaLocation
    */
    static void WriteCaexSchemaLocation(void *instance, string_type &value);

    /** Adds a new InstanceHierarchy.
    Adding a new InstanceHierarchy to this CAEX file. The name attribute is set to "New InstanceHierarchy";
    @param[in] name The name of the new InstanceHierarchy
    @note The user is responsible to delete the object the returned pointer is pointing to!
    @return A new InstanceHierarchy node
    */
    CAEX_ClassModel_EXPORT InstanceHierarchyType *New_InstanceHierarchy(string_type name);

    /** Adds a new SystemUnitClassLib.
    Adding a new SystemUnitClassLib Hierarchy to this CAEX file.
    @param[in] name The name of the new SystemUnitClassLibrary
    @note The user is responsible to delete the object the returned pointer is pointing to!
    @return The new SystemUnitClassLibrary
    */
    CAEX_ClassModel_EXPORT SystemUnitClassLibType *New_SystemUnitClassLibHierarchy(string_type name);

    /// Importing a SystemUnitClassLib from another document context. Unlike method Insert_SystemUnitClassLibHierarchy(..)
    /// SystemUnitClassLibs that are coming from other files can be inserted.
    /// @param systemUnitClassLib The SystemUnitClassLib to import to this document
    void Import_SystemUnitClassLibHierarchy(SystemUnitClassLibType *systemUnitClassLib);

    /// Insert a system unit class library to this aml file.
    /// @param systemUnitClassLib The system unit class library to insert.
    void Insert_SystemUnitClassLibHierarchy(SystemUnitClassLibType *systemUnitClassLib);

    /** Adds a new RoleClassLib
    Adding a new RoleClassLib to this CAEX file.
    @param[in] name The name of the RoleClassLib.
    @note The user is responsible to delete the object the returned pointer is pointing to!
    @return A new RoleClassLib node
    */
    CAEX_ClassModel_EXPORT RoleClassLibType *New_RoleClassLibHierarchy(string_type name);

private:
    /** Insert a role class lib internal.
    @param rolClassLibNode The role class lib node to insert
    */
    void InsertRoleClassLibInternal(xercesc::DOMNode *roleClassLibNode);

public:
    /// Insert a role class library to this aml file
    /// @param roleClassLib The role class library to insert
    void Insert_RoleClassLibHierarchy(RoleClassLibType *roleClassLib);

    /// Importing a RoleClassLib from another document context. Unlike method Insert_RoleClassLibHierarchy(..)
    /// RoleClassLibs that are coming from other files can be inserted.
    /// @param roleClassLib The RoleClassLib to import to this document
    void Import_RoleClassLibHierarchy(RoleClassLibType *roleClassLib);

public:
    /// A new ExternalReference node is added to the CAEX file.
    /// @param path The path value of this external reference
    /// @param alias The alias value of this external reference
    /// @note The user is responsible to delete the object the returned pointer is pointing to!
    /// @return A new ExternalReference
    CAEX_ClassModel_EXPORT ExternalReferenceType *New_ExternalReferenceHierarchy(string_type path, string_type alias);

    /// Adding a new InterfaceClassLib hierarchy node to this CAEX file.
    /// @param name The name of the new InterfaceClassLibHierarchy
    /// @note The user is responsible to delete the object the returned pointer is pointing to!
    /// @return A new InterfaceClassLib node
    CAEX_ClassModel_EXPORT InterfaceClassLibType *New_InterfaceClassLibHierarchy(string_type name);

private:
    /// Inserting at correct position due to schema.
    /// @param newInterfaceClassLibHierarchyNode The interface class lib hierarchy to insert
    void InsertInterfaceClassLibInternal(xercesc::DOMNode *newInterfaceClassLibHierarchyNode);

public:
    /// Importing a InterfaceClassLibHierarchy from another document context. Unlike method Insert_InterfaceClassLibHierarchy(..)
    /// InterfaceClassLibHierarchys that are coming from other files can be inserted.
    /// @param roleClassLib The InterfaceClassLibHierarchy to import to this document
    void Import_InterfaceClassLibHierarchy(InterfaceClassLibType *interfaceClassLib);

    /// Insert an existing interface class library to this aml file
    /// @param interfaceClassLibNode The interface class lib to insert
    void Insert_InterfaceClassLibHierarchy(InterfaceClassLibType *interfaceClassLibNode);

    /// Getting copies of all InternalElements with InternalLinks of the InstanceHierarchy elements in this CAEX file.
    /// @return A List with copied InternalElements is returned
    CAEX_ClassModel_EXPORT std::vector<InternalElementType> getAllInternalElementsWithInternalLinks();

    /// Iterating through all InternalElements starting with the given InternalElement and copying all InternalElements with InternalLinks present
    /// @param internalElement The InternalElement to check for InternalLinks
    /// @param internalElementsList The list of copied InternalElements with InternalLinks present
private:
    void IterateInternalElementsForLinks(InternalElementType *internalElement, std::vector<InternalElementType> &internalElementsList);
};

}	// namespace CAEX_ClassModel

#endif // _ALTOVA_INCLUDED_CAEX_ClassModel_ALTOVA__ALTOVA_CCAEXFileType
