AutomationML Engine for C++

The AutomationML Engine has been written in C#. Due to recent wishes the
AML-Engine has been ported to C++, also with respect to multiplatform
availability.

Because the AML-Engine in C# has been generated by Altova XMLSpy, the starting
point for AML-Engine in C++ was also the generated code by Altova XMLSpy. As
for the C# version the C++ version was also extended, e.g. for check if
singular elements are only inserted once. Additionally and also with respect
to the multiplatform availability, the C++ version uses xerces as XML API.

The Altova helper libraries (libAltova and libAltovaXML) needed some
modifications to make it usable on Linux or other platforms.

The AutomationML Engine API is nearly the same as for the C# version. Main
differences are in returned data types for the New_* member function. All
New_* member functions return a pointer to the "generated" object. The user
is responsible to free the allocated memory if the object is not used anymore.
The majority of the properties can be accessed as a normal member variable.
Only a few have getter and/or setter functions.

To compile and use the C++ version of the AutomationML Engine the following
libs and its headers are needed besides the standard libs and headers:
- uuid (not needed for windows)
- xerces 2.8 

For Visual-C++ a solution file is provided in the CAEX_ClassModel (for the
lib) and CAEX_ClassModelTest (for the test and example program) directory.
A main solution can be found in AutomationMLEngineCppMain, containing only 
references to the other projects. Open and compile this solution to create 
the engine libraries.

For Linux an Automake project is included in the source directories. The
possibility is very high to compile the AutomationML library with nearly
zero change on platforms for which Automake is available. Beside this file
a top-level-Makefile is availble which runs the configure and
make tasks first for xerces and second for the AutomationML Engine library.
